# -*- coding: utf-8 -*-
"""
Created on Fri Mar 29 18:43:40 2019

@author: lukab
"""
import sys
import numpy as np
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from math import factorial
smjer=1
brojac=0.01
tocke=[]

#OCISTE ILI GLEDIŠTE KOJE VARIRAMO
tocke.append([0,300,2,1])
tocke.append([200,600,2,1])
tocke.append([300,-600,2,1])
tocke.append([700,700,2,1])

#tocke.append([1,1,2,1])
#tocke.append([300,500,2,1])
#tocke.append([600,50,2,1])
#tocke.append([900,300,2,1])

#POTENCIJALNO GLEDISTE
#tocke.append([2,2,1,1])
#tocke.append([3,6,1,1])
#tocke.append([6,0,1,1])
#tocke.append([9,4,1,1])
n=len(tocke)

def b(i,n,t):
    temp = (factorial(n) * pow(t,i) * pow((1-t),n-i)) / (factorial(i) * factorial(n-i))
    return temp


# BAZNE (TEŽINSKE) FUNKCIJE STUPNJA n - duljina točke.
B=dict()
B = {round(new_list,2): [] for new_list in np.arange(0,1,0.01)}
for t in np.arange(0,1-0.01,0.01):
    t=round(t,2)
    for i,tocka in enumerate(tocke):
        
        # BERNSTEINOVA FORMULA
        B[t].append(b(i,n-1,t))


# TOČKE NA KRIVULJI (VEKTORSKI ZAPIS x(t), y(t), z(t)),
# A r(i) SU VRHOVI KONTROLNOG POLINOMA
p=dict()
p = {round(new_list,2): [] for new_list in np.arange(0,1,0.01)}
for t in np.arange(0, 1-0.01, 0.01):
    t=round(t,2)
    s=np.array([0,0,0,0])

    for i,tocka in enumerate(tocke):
        # POMNOZI TOCKU KONTROLNOG POLIGONA SA b(i), formula(4)
        # I SVE ZBRAJAJ I SPREMAJ U array s
        s = np.add(s, np.multiply(tocka, B[t][i]))

    # SPREMAJ U DICTIONARY TOČKE BEZIEROVE
    # KRIVULJE DEFINIRANE POLINOMIMA BERNSTEINA
    p[t] = s


#O = np.array([1, 1, 20, 1])
O = np.array(p[0])
G = np.array([5, 5, 5, 1])


# ČITANJE IZ DATOTEKE .obj
with open("teddy.obj", "r") as f:
    txt=f.readlines()
v=[]
f=[]
for line in txt:
    if(line[0] == 'v'):
        v.append(line[1:].split())
    elif(line[0] == 'f'):
        f.append(line[1:].split())

for i in range(len(f)):
    for j in range(3):
        f[i][j] = int(f[i][j])
        f[i][j]-=1
for i in range(len(v)):
    for j in range(3):
        v[i][j] = float(v[i][j])
v=np.array(v)


def t1(o,g):
    T1 = np.array([[1,0,0,0],[0,1,0,0],[0,0,1,0],[-o[0], -o[1], -o[2], 1]])
    return T1
def t2(o,g,G1):
    sinalfa = G1[1] / np.sqrt(np.square(G1[0]) + np.square(G1[1]))
    cosalfa = G1[0] / np.sqrt(np.square(G1[0]) + np.square(G1[1]))
    T2 = np.array([[cosalfa, -sinalfa, 0, 0], [sinalfa, cosalfa, 0, 0], [0,0,1,0],[0,0,0,1]])
    return T2
def t3(o,g,G2):
    sinbeta = G2[0] / np.sqrt(np.square(G2[0]) + np.square(G2[2]))
    cosbeta = G2[2] / np.sqrt(np.square(G2[0]) + np.square(G2[2]))
    T3 = np.array([[cosbeta, 0, sinbeta, 0],[0,1,0,0], [-sinbeta,0, cosbeta,0],[0,0,0,1]])
    return T3

def tempf():
    Ap_crtaj0=[]
    Ap_crtaj1 = []
    Ap_crtaj2 = np.zeros((len(v),2))
    global poligoni
    #1 IZ DATOTEKE UČITATI KOORDINATE OČIŠTA, GLEDIŠTA I VRHOVA POLIGONA USUSTAVU SCENE.
    global O,G


    #2. ODREDITI MATRICU TRANSFORMACIJE POGLEDA T PO FORMULI 5.7 ILI 5.20.
    T1 = t1(O,G)
    G1 = np.dot(G,T1)

    T2 = t2(O, G, G1)
    G2 = np.dot(G1,T2)

    T3 = t3(O,G,G2)
    #G3 = np.dot(G2,T3)

    T4 = np.array([[0,-1,0,0],[1,0,0,0],[0,0,1,0],[0,0,0,1]])
    T5 = np.array([[-1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])

    #3 ODREDITI MATRICU PERSPEKTIVNE PROJEKCIJE P.
    temp = np.dot(np.dot(np.dot(T2,T3), T4), T5)
    T_UK = np.dot(T1,temp)

    #4 NAČINITI TRANSFORMACIJU I PROJEKCIJU ZADANIH VRHOVA POLIGONA.
    # TRANSFORMACIJA POGLEDA
    for tocka in v:
        tockaV = np.insert(tocka, len(tocka), 1)
        Ap_crtaj0.append(np.dot(tockaV,T_UK))

    H = np.sqrt(np.square(O[0]-G[0]) + np.square(O[1]- G[1]) + np.square(O[2]- G[2]))
    P = np.array([[1,0,0,0],[0,1,0,0],[0,0,0,1/H],[0,0,0,0]])


    # PERSPEKTIVNA PROJEKCIJA
    
    for tocka in Ap_crtaj0:
        Ap_crtaj1.append(np.dot(tocka,P))


    for i,tocka in enumerate(Ap_crtaj1):
        Ap_crtaj2[i][0] = Ap_crtaj1[i][0] / Ap_crtaj1[i][3]
        Ap_crtaj2[i][1] = Ap_crtaj1[i][1] / Ap_crtaj1[i][3]

    # 5 ISCRTATI POLIGON / VRATITI POTREBNE TOČKE ZA CRTANJE.


    x1l=[]
    y1l=[]
    x2l=[]
    y2l=[]
    x3l=[]
    y3l=[]

    for i,poligon in enumerate(f):
        for j,svaki in enumerate(poligon):
            if j==0:
                x1=Ap_crtaj2[svaki][0]
                y1=Ap_crtaj2[svaki][1]
                #z1=Ap_crtaj[svaki][2]
                x1l.append(x1)
                y1l.append(y1)
            elif j==1:
                x2=Ap_crtaj2[svaki][0]
                y2=Ap_crtaj2[svaki][1]
                #z2=Ap_crtaj[svaki][2]
                x2l.append(x2)
                y2l.append(y2)
            elif j==2:
                x3=Ap_crtaj2[svaki][0]
                y3=Ap_crtaj2[svaki][1]
                #z3=Ap_crtaj[svaki][2]
                x3l.append(x3)
                y3l.append(y3)
    return x1l,y1l,x2l,y2l


def nacrtajObjekt(x1l,y1l,x2l,y2l):
    glBegin(GL_LINE_STRIP)
    for i in range(len(x1l)):
        glVertex2f(x1l[i],y1l[i])
        glVertex2f(x2l[i],y2l[i])
    glEnd()



def renderScene():
    #global x1l,y1l,x2l,y2l
    
    #glTranslatef(10.0,10.0,0.0) # kocka
    #glScalef(200.0,200.0,200.0) 
    #glScalef(400.0,400.0,400.0) #kocka
    glTranslatef(200.0,250.0,0.0) # teddy
    glRotatef(180.0,0.0,0.0,1.0)
    glScalef(10.0,10.0,10.0) #teddy
    
    x1l,y1l,x2l,y2l = tempf()
    nacrtajObjekt(x1l,y1l,x2l,y2l)
    #glutKeyboardFunc(moja_tipkovnica)
    mijenjajOcisteIGledistePoBezierovojKrivulji()
    

def display():
    glClearColor(1.0,0.0,0.0,1.0)#specify clear values for the color buffers
    glClear(GL_COLOR_BUFFER_BIT)#| GL_DEPTH_BUFFER_BITclear buffers to preset values, | GL_DEPTH_BUFFER_BIT
    glLoadIdentity()
    
    renderScene()
    
    glutSwapBuffers()
    
    
def reshape(width,height):
    glDisable(GL_DEPTH_TEST)
    glViewport(0, 0, GLsizei(width) , GLsizei(height))
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0,width-1, height-1,0,0,1)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    #pass
def mijenjajOcisteIGledistePoBezierovojKrivulji():
    global O,G,p,smjer,brojac
    
    if(brojac==0.98 or brojac==0.01):
        smjer = (-1)*smjer
    
    if(smjer == 1):
        brojac+=0.01
        brojac=round(brojac,2)
        #O = p[brojac]
    elif(smjer == -1):
        brojac-=0.01
        brojac=round(brojac,2)
    
    if(brojac==0.99):
        brojac-=0.01
        brojac=round(brojac,2)
    elif(brojac==0.00):
        brojac+=0.01
        brojac=round(brojac,2)
    print(brojac)
    #print(p[brojac][0])
    O[0] = p[brojac][0]
    O[1] = p[brojac][1]
    O[2] = p[brojac][2]
    
    #G[0] = p[brojac][0]
    #G[1] = p[brojac][1]
    #G[2] = p[brojac][2]
    
    
#INIT
glutInit()
glutInitDisplayMode(GLUT_DOUBLE) # dva graficka spremnika- prikaz na zaslonu a u drugi se crta slijedeca scena
glutInitWindowSize(800,500)
glutInitWindowPosition(200,200)
glutCreateWindow("6. domaca zadaca u Pythonu - Poligon")
glutDisplayFunc(display)# bez ovoga no display callbackregistered for window 1
glutReshapeFunc(reshape)

#glutTimerFunc(20,timer,0)
glutIdleFunc(display)
glutMainLoop()